import{ExportVideo}from"./export-video.js";import{Globals}from"./globals.js";import{InterDummyData}from"./inter-dummy-data.js";import{Layout}from"./layout.js";import{Menu}from"./menu.js";import{Model,ProjectVars}from"./model/model.js";import{Properties}from"./properties.js";import{Shortcuts}from"./shortcuts.js";import{Timeline}from"./timeline.js";import{Tools}from"./tools.js";export class Inter{IS_DEBUG=!0;constructor(){if(this.IS_DEBUG&&console.info(`constructor inter.js -- isSingleton: ${null!=Inter.instance}`),Inter.instance)return Inter.instance;Inter.instance=this,this.data="I am a singleton";const t=this.interpolateColor("#ff3333","#3333ff",.5);console.log(`Interpolated color: ${t}`),console.log(this.interpolateColor("#ff3333","#3333ff",.010101010101010102)),this.setup(InterDummyData.projectFileTest)}getData(){return this.data}setData(t){this.data=t}setup(t){this.IS_DEBUG&&console.info("Inter.setup(..)");const e=t.frames;t.calculated=this.getFrameData(e),t.calculated.forEach((t=>{})),console.log(t)}calculatedFramesFromProjectVars(){this.IS_DEBUG&&console.info("Inter.calculatedFramesFromProjectVars");const t=ProjectVars.frames;ProjectVars.calculated=this.getFrameData(t),ProjectVars.calculated.forEach((t=>{})),console.log(ProjectVars)}init(){this.IS_DEBUG&&console.info("Inter.init()");const t=this.projectFileTest.frames;this.projectFileTest.calculated=this.getFrameData(t),this.projectFileTest.calculated.forEach((t=>{})),console.log(this.projectFileTest),(new Model).setProjectViaFile(this.projectFileTest)}parseSVG(t){const e=(new DOMParser).parseFromString(t,"image/svg+xml"),r=t=>Array.from(e.querySelectorAll(t)).map((t=>({tag:t.tagName,attrs:Array.from(t.attributes).reduce(((t,e)=>(t[e.name]=e.value,t)),{}),textContent:t.textContent})));return{ellipses:r("ellipse"),circles:r("circle"),rects:r("rect"),texts:r("text")}}interpolateValue(t,e,r){return Math.round(t+(e-t)*r)}interpolateColor(t,e,r){if(!t||!e)return console.error("interpolateColor: Start or end color is undefined",t,e),"#000000";const s=parseInt(t.slice(1),16),a=parseInt(e.slice(1),16);return`#${((1<<24)+(this.interpolateValue(s>>16&255,a>>16&255,r)<<16)+(this.interpolateValue(s>>8&255,a>>8&255,r)<<8)+this.interpolateValue(255&s,255&a,r)).toString(16).slice(1)}`}generateSVG(t,e,r,s){const a=t.map((t=>`<ellipse cx='${t.cx}' cy='${t.cy}' rx='${t.rx}' ry='${t.ry}' stroke='${t.stroke}' stroke-width='${t.strokeWidth}' fill='${t.fill}' />`)).join(""),l=e.map((t=>`<circle cx='${t.cx}' cy='${t.cy}' r='${t.r}' stroke='${t.stroke}' stroke-width='${t.strokeWidth}' fill='${t.fill}' />`)).join(""),o=r.map((t=>`<rect x='${t.x}' y='${t.y}' width='${t.width}' height='${t.height}' stroke='${t.stroke}' stroke-width='${t.strokeWidth}' fill='${t.fill}' />`)).join(""),i=s.map((t=>`<text x='${t.x}' y='${t.y}' font-family='Verdana' font-size='${t.fontSize}' fill='${t.fill}'>${t.textContent}</text>`)).join("");return`<svg width='${ProjectVars.width}' height='${ProjectVars.height}' xmlns='http://www.w3.org/2000/svg'>\n\t\t${a}\n\t\t${l}\n\t\t${o}\n\t\t${i}\n\t\t</svg>`.replaceAll("\n","").replaceAll("\r","").replaceAll("\t","").replaceAll("  "," ")}interpolateElements(t,e,r,s){return t.map(((t,a)=>{const l=e[a];switch(s){case"ellipse":return{cx:this.interpolateValue(parseFloat(t.attrs.cx),parseFloat(l.attrs.cx),r),cy:this.interpolateValue(parseFloat(t.attrs.cy),parseFloat(l.attrs.cy),r),rx:this.interpolateValue(parseFloat(t.attrs.rx),parseFloat(l.attrs.rx),r),ry:this.interpolateValue(parseFloat(t.attrs.ry),parseFloat(l.attrs.ry),r),strokeWidth:this.interpolateValue(parseFloat(t.attrs["stroke-width"]),parseFloat(l.attrs["stroke-width"]),r),stroke:this.interpolateColor(t.attrs.stroke,l.attrs.stroke,r),fill:this.interpolateColor(t.attrs.fill,l.attrs.fill,r)};case"circle":return{cx:this.interpolateValue(parseFloat(t.attrs.cx),parseFloat(l.attrs.cx),r),cy:this.interpolateValue(parseFloat(t.attrs.cy),parseFloat(l.attrs.cy),r),r:this.interpolateValue(parseFloat(t.attrs.r),parseFloat(l.attrs.r),r),strokeWidth:this.interpolateValue(parseFloat(t.attrs["stroke-width"]),parseFloat(l.attrs["stroke-width"]),r),stroke:this.interpolateColor(t.attrs.stroke,l.attrs.stroke,r),fill:this.interpolateColor(t.attrs.fill,l.attrs.fill,r)};case"rect":return{x:this.interpolateValue(parseFloat(t.attrs.x),parseFloat(l.attrs.x),r),y:this.interpolateValue(parseFloat(t.attrs.y),parseFloat(l.attrs.y),r),width:this.interpolateValue(parseFloat(t.attrs.width),parseFloat(l.attrs.width),r),height:this.interpolateValue(parseFloat(t.attrs.height),parseFloat(l.attrs.height),r),strokeWidth:this.interpolateValue(parseFloat(t.attrs["stroke-width"]),parseFloat(l.attrs["stroke-width"]),r),stroke:this.interpolateColor(t.attrs.stroke,l.attrs.stroke,r),fill:this.interpolateColor(t.attrs.fill,l.attrs.fill,r)};case"text":return{x:this.interpolateValue(parseFloat(t.attrs.x),parseFloat(l.attrs.x),r),y:this.interpolateValue(parseFloat(t.attrs.y),parseFloat(l.attrs.y),r),textContent:t.textContent,fill:t.attrs.fill,fontSize:this.interpolateValue(parseFloat(t.attrs["font-size"]),parseFloat(l.attrs["font-size"]),r)};default:console.warn("oeps")}}))}getFrameData(t){const e=[],r=new Set;for(let s=0;s<t.length-1;s++){const a=t[s],l=t[s+1];a.svg=a.svg.replaceAll("\n","").replaceAll("\r","").replaceAll("\t","").replaceAll("  ","").replaceAll("> <","><"),l.svg=l.svg.replaceAll("\n","").replaceAll("\r","").replaceAll("\t","").replaceAll("  ","").replaceAll("> <","><");const o=this.parseSVG(a.svg),i=this.parseSVG(l.svg);for(let t=a.frameNumber;t<=l.frameNumber;t++){if(r.has(t))continue;r.add(t);const s=(t-a.frameNumber)/(l.frameNumber-a.frameNumber),n=this.interpolateElements(o.ellipses,i.ellipses,s,"ellipse"),c=this.interpolateElements(o.circles,i.circles,s,"circle"),p=this.interpolateElements(o.rects,i.rects,s,"rect"),h=this.interpolateElements(o.texts,i.texts,s,"text");e.push({frameNumber:t,svg:this.generateSVG(n,c,p,h)})}}const s=t[t.length-1];this.parseSVG(s.svg);return e.push({frameNumber:s.frameNumber,svg:s.svg}),e}}